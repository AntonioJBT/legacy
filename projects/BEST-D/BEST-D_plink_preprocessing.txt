#!/bin/bash

#########################
#Genotype QC pipeline
#Pre-processing of raw genotype data for use as plink input.
#Antonio J Berlanga-Taylor
#Updated 14 January 2016

#########################

##Quality control of subject and SNP genotyping data
# Note this is now using plink 1.9, which is currently in beta
# Input is an Illumina SNP genotype file and output are LGEN, FAM, PED and MAP files which can be used for QC (markers QC and individuals QC) and later 
# for association analysis, eQTL, etc.

#Check:
#Anderson et al. 2010 protocol: http://www.nature.com/nprot/journal/v5/n9/pdf/nprot.2010.116.pdf
#Winkler et al. 2014 protocol (meta-analysis of GWAS): http://www.nature.com/nprot/journal/v9/n5/pdf/nprot.2014.071.pdf
#Plink tutorial: http://pngu.mgh.harvard.edu/~purcell/plink/tutorial.shtml

## Note: original pre-processing was run with plink 1.07 Jan 2015, this file is being updated although commands (use plink instead of plink2) should work.

#Dependencies:
#EIGENSOFT: ftp://pricelab:pricelab@ftp.broadinstitute.org/EIGENSOFT/EIG6.0.1.tar.gz
#Plink: http://pngu.mgh.harvard.edu/~purcell/plink/ibdibs.shtml
#Plotting scripts and others from Anderson et al 2010 protocol, currently in:
#/ifs/projects/proj043/analysis.dir/genotypes.dir
#and
#/ifs/projects/proj043/analysis.dir/genotypes.dir/Anderson_et_al_2010_Nat_Protocols.dir/

#########################


#########################
##Plink help:
#plink2 --noweb --help

#Data management:

##Convert Illumina's Beadstudio output ('xxx_FinalReport.txt') into .ped and .map files

#Convert files from raw genotypes to Plink's lgen, map and ped formats:
#http://pngu.mgh.harvard.edu/~purcell/plink/data.shtml#ped
#https://www.biostars.org/p/10332/
#http://pngu.mgh.harvard.edu/~purcell/plink/data.shtml#map


#Convert from raw to lgen:

cat P140343-Results_FinalReport.txt | cut -f1,2,17,18 | sed "1,10d" | sed "s/-/0/g" | awk '{print $2,$2,$1,$3,$4}' > P140343-Results_FinalReport.lgen

#Convert from raw to map:

cat P140343-Results_FinalReport.txt | cut -f1,19,20 | sed "1,10d" | awk '{print $2,$1,"0",$3}' | sort -u > P140343-Results_FinalReport.map

#Use lgen and map to obtain fam (lgen file has no paternal/maternal IDs, sex or phenotype information so are set to missing, see below for generating new fam file and alternate phenotype file): 

perl -ane '{print "$F[0] $F[0] 0 0 0 -9\n"}' P140343-Results_FinalReport.lgen | sort -u -k1,1 > P140343-Results_FinalReport.fam

#Use lgen, fam and map to generate ped:

plink2 --noweb --lfile P140343-Results_FinalReport --recode --out P140343-Results_FinalReport.ped

#Check Plink output for results: log file, nof (nofounder) report, nosex (ambiguous sex) report.

##Generate binary files with plink2 (faster reading):
#To disable the automatic setting of the phenotype to missing if the individual has an ambiguous sex code, add the --allow-no-sex option.

plink2 --noweb --file P140343-Results_FinalReport --make-bed --out P140343-Results_FinalReport

##Sanity check with plink2 to see if file is intact and generate some summary stats. Results should be the same as log file generated from converting to binary file:

plink2 --noweb --bfile P140343-Results_FinalReport

#########################


#########################
#Create a phenotype file to perform association analysis: 

#http://pngu.mgh.harvard.edu/~purcell/plink/data.shtml#pheno
#http://pngu.mgh.harvard.edu/~purcell/plink/data.shtml#covar
#To produce file with covariates for association analysis (very similar to pheno file).


#File processing to create pheno file for plink2, add genotypes and gender to fam file:

#In /ifs/projects/proj043/analysis.dir

# TO DO: convert to python script
#Run ipython console and in the console:

import sqlite3, pandas
pandas.__version__

#Read in fam file generated by plink2 above with missing values into Pandas and pass to sqlite3 database:

df_fam_2 = pandas.read_csv('./genotypes.dir/P140343-Results_FinalReport.fam', header=None, sep=' ', names=['Family_ID','Individual_ID', 'Paternal_ID', 'Maternal_ID', 'Sex', 'Phenotype'])
df_fam_2.head(10)
df_fam_2.ix[:10, :2]
df_fam_2.to_sql(name='P140343_Results_FinalReport_fam', if_exists='replace', con=sqlite3.connect('BESTD_csvdb'), flavor='sqlite')

#Read in ID file from BEST-D into Pandas and pass to sqlite3 database:

df_kits_2 = pandas.read_csv('03_form_lab_kits.csv', header=0, sep=',')
df_kits_2.ix[:10,:]
df_kits_2.to_sql(name='pt_ids_03_form_lab_kits_original', if_exists='replace', con=sqlite3.connect('BESTD_csvdb'), flavor='sqlite')


#Run sqlite3:

sqlite3 BEST-D
.header ON #Else headers are not printed when outputting.

#Create table joining patient and lab IDs:

CREATE VIEW pt_id_to_lab_id AS SELECT * FROM P140343_Results_FinalReport_fam,pt_ids_03_form_lab_kits_original WHERE P140343_Results_FinalReport_fam.kit_id = pt_ids_03_form_lab_kits_original.kit_id ;

#Create table joining all phenotypes and lab IDs:

CREATE VIEW JULIAN_sheet_1_for_plink_lab_id AS SELECT * FROM JULIAN_sheet_1_for_plink JOIN pt_id_to_lab_id USING (pt_id);

#Create table for plink2 fam file using kit IDs only (as both Family and Individual IDs given that the original plink2 lgen file is generated like this and easier to keep as such), gender (male) and arm (phenotype). Paternal and Maternal IDs will remain as '0':

#CREATE VIEW new_fam AS SELECT kit_id, pt_id, Paternal_ID, Maternal_ID, male, arm FROM #JULIAN_sheet_1_for_plink_lab_id;

CREATE VIEW new_fam_lgen AS SELECT kit_id, kit_id, Paternal_ID, Maternal_ID, male, arm FROM JULIAN_sheet_1_for_plink_lab_id;

#Check output:
.tables
SELECT count(*) FROM new_fam;


#Output new_fam to terminal:

.output new_fam_lgen.txt
SELECT * FROM new_fam_lgen;

#Output alternate phenotype file to terminal:

.output BEST-D_alternate_phenotypes.txt

SELECT Family_ID, pt_id, visit_type, height_dexa, weight_dexa, foot_tscore, forearm_tscore, arm, incident_fall, incident_fracture, incident_resp_infection, ptr_si0, ptr_ri0, ptr_si12, ptr_ri12, art_pwv0, art_AI_aortic0, art_sbp0, art_dbp0, art_hr0, art_pwv12, art_AI_aortic12, art_sbp12, art_dbp12, art_hr12, albumin0, alk_phosphatase0, phosphate0, vitd0, apo_a10, apo_b0, tchol0, creatinine0, ldlc0, ipth0, trig0, hdlc0, crp0, vitd6, albumin12, alk_phosphatase12, phosphate12, vitd12, apo_a112, apo_b12, tchol12, creatinine12, ldlc12, ipth12, trig12, hdlc12, crp12, male, bmi0, corrected_calcium0, corrected_calcium12 FROM JULIAN_sheet_1_for_plink2_lab_id ;

#Output Family_ID twice for later plink2 analysis (otherwise fam and other files need modifying to match): 

.output BEST-D_alternate_phenotypes_kit_ID_twice_recoded.txt

SELECT Family_ID, Family_ID, pt_id, visit_type, height_dexa, weight_dexa, foot_tscore, forearm_tscore, arm, incident_fall, incident_fracture, incident_resp_infection, ptr_si0, ptr_ri0, ptr_si12, ptr_ri12, art_pwv0, art_AI_aortic0, art_sbp0, art_dbp0, art_hr0, art_pwv12, art_AI_aortic12, art_sbp12, art_dbp12, art_hr12, albumin0, alk_phosphatase0, phosphate0, vitd0, apo_a10, apo_b0, tchol0, creatinine0, ldlc0, ipth0, trig0, hdlc0, crp0, vitd6, albumin12, alk_phosphatase12, phosphate12, vitd12, apo_a112, apo_b12, tchol12, creatinine12, ldlc12, ipth12, trig12, hdlc12, crp12, male, bmi0, corrected_calcium0, corrected_calcium12 FROM JULIAN_sheet_1_for_plink2_lab_id ;

#Modify in ipython console:
import sqlite3, pandas, numpy

df_new_pheno = pandas.read_csv('BEST-D_alternate_phenotypes_kit_ID_twice_recoded.txt', header=0, sep='|')
df_new_pheno.dtypes
df_new_pheno.head()

df_new_pheno_2 = df_new_pheno.copy()

df_new_pheno.dtypes
df_new_pheno.head()

#Rename column headers to match plink2 alternate phenotype file:
#Careful, this fills values, not rename column header: df_new_pheno['pt_id'] = 'IID'

df_new_pheno_2.rename(columns={'Family_ID':'FID'}, inplace=True)
df_new_pheno_2.rename(columns={'pt_id':'IID_pt_id'}, inplace=True)
df_new_pheno_2.rename(columns={'Family_ID.1':'IID'}, inplace=True)


#Replace NaN missing values with -99999:
#Simplest is df.fillna('-99999').
#Careful, if not set as string this replaces values but will add decimals. Check how plink2 handles strings in numeric variable or -9999.00 as missing value:

df_new_pheno_2.replace('NaN', '-99999', inplace=True)
df_new_pheno_2.head()

##########################
# TO DO: Clean this up, have run this in R in separate file.
#Recode arm into new variables for sub-group analysis (because plink2's coding takes 0 or -9 = missing, 1 = unaffected, 2 = affected). 
# I've changed this below in the same way as here for the fam file
# Here I'll add new columns to create further labels of cases and controls within the phenotype file for sub-group tests 
#(ie placebo vs 2000+4000, 4000 vs placebo, etc.).
# Recode into new variables from original 'arm':
#0=4000 IU, 1=2000 IU, 2=Placebo
#to new
# -99999 = missing ; 1 = untreated or 2000UI ; 2 = 4000 or both treatments groups

#df_new_pheno_2['placebo_v_Tx'] = numpy.where(df_new_pheno_2['arm'] == 2, '1', '2') # Change placebo to 1 and others (2000 and 4000) to 2.

#df_new_pheno_2['placebo_v_4000'] = numpy.where(df_new_pheno_2['arm'] == 2, '1') # Change placebo to 1.
#df_new_pheno_2['placebo_v_4000'] = ''
#df_new_pheno_2['placebo_v_4000'][(df_new_pheno_2['arm'] == 2)] = 1 # Change placebo to 1.
#df_new_pheno_2['placebo_v_4000'][(df_new_pheno_2['arm'] == 0)] = 2 # Change 4000 to 2.
#df_new_pheno_2['placebo_v_4000'] = numpy.where(df_new_pheno_2['arm'] == 0, '2') # Change 4000 to 2.

#df_new_pheno_2['placebo_v_4000'] = numpy.where(df_new_pheno_2['arm'] == 1, '-99999') # Change 2000 to missing.

#df_new_pheno_2['placebo_v_2000'] = numpy.where(df_new_pheno_2['arm'] == 2, '1') # Change placebo to 1.
#df_new_pheno_2['placebo_v_2000'] = numpy.where(df_new_pheno_2['arm'] == 1, '2') # Change 2000 to 2.
#df_new_pheno_2['placebo_v_2000'] = numpy.where(df_new_pheno_2['arm'] == 0, '-99999') # Change 4000 to missing.

#df_new_pheno_2['4000_v_2000'] = numpy.where(df_new_pheno_2['arm'] == 2, '-99999') # Change placebo to missing.  
#df_new_pheno_2['4000_v_2000'] = numpy.where(df_new_pheno_2['arm'] == 1, '1') # Kepp 2000 as 1.
#df_new_pheno_2['4000_v_2000'] = numpy.where(df_new_pheno_2['arm'] == 0, '2') # Change 4000 to 2.
##########################

#Save file to terminal:

df_new_pheno_2.to_csv('BEST-D_alternate_phenotypes_kit_ID_twice_recoded.txt', sep=' ', index=False, header=True)

quit()

#In ipython console (this is for fam file for plink, not for the previous phenotype file):

import sqlite3, pandas

df_new_fam_lgen = pandas.read_csv('new_fam_lgen.txt', sep='|', header=0)
df_new_fam_lgen.head()
df_new_fam_lgen.dtypes

df_new_fam_lgen_recoded = df_new_fam_lgen.copy()

#Recode gender for plink2 fam file where 1=male, 2=female:

df_new_fam_lgen_recoded['male'].replace(0, 2, inplace=True)

#Recode arm for plink2 fam file phenotype variable where 0 or -9 = missing, 1 = unaffected, 2 = affected. Recode from original
#0=4000 IU, 1=2000 IU, 2=Placebo
#to new
#2=4000 IU, 2=2000 IU, 1=Placebo

df_new_fam_lgen_recoded['arm'].replace(2, -9, inplace=True)
df_new_fam_lgen_recoded['arm'].replace(0, 2, inplace=True)
df_new_fam_lgen_recoded['arm'].replace(1, 2, inplace=True)
df_new_fam_lgen_recoded['arm'].replace(-9, 1, inplace=True)

df_new_fam_lgen_recoded.head()

df_new_fam_lgen_recoded.to_csv('new_fam_lgen_recoded.txt', sep=' ', index=False, header=False)

quit()

#In terminal:

mv new_fam_lgen_recoded.txt genotypes.dir/.

cd genotypes.dir
mv new_fam_lgen_recoded.txt P140343-Results_FinalReport.fam
##################

##################
#Repeat renaming of headers for  new pheno file for plink2 in ipython console. This file isn't needed though:

#Set number of decimals to display:
pandas.set_option('precision', 3)

df_new_pheno = pandas.read_csv('BEST-D_alternate_phenotypes.txt', header=0, sep='|')
df_new_pheno.dtypes
df_new_pheno.head()

df_new_pheno_2 = df_new_pheno.copy()

df_new_pheno.dtypes
df_new_pheno.head()

#Rename column headers to match plink2 alternate phenotype file:
#Careful, this fills values, not rename column header: df_new_pheno['pt_id'] = 'IID'

df_new_pheno_2.rename(columns={'Family_ID':'FID'}, inplace=True)
df_new_pheno_2.rename(columns={'pt_id':'IID'}, inplace=True)


#Replace NaN missing values with -99999:
#Simplest is df.fillna('-99999').
#Careful, if not set as string this replaces values but will add decimals. Check how plink2 handles strings in numeric variable or -9999.00 as missing value:

df_new_pheno_2.replace('NaN', '-99999', inplace=True)
df_new_pheno_2.head()

#Save file to terminal:

df_new_pheno_2.to_csv('BEST-D_alternate_phenotypes_recoded.txt', sep=' ', index=False, header=True)

#########################

#########################
#Regenerate ped file as above:

#Use lgen, map and the new fam to generate ped:

plink2 --noweb --lfile P140343-Results_FinalReport --recode --out P140343-Results_FinalReport_2

#Check Plink output for results: log file, nof (nofounder) report, nosex (ambiguous sex) report.

##Generate binary files with plink2 (faster reading):

plink2 --noweb --file P140343-Results_FinalReport --make-bed --out P140343-Results_FinalReport

##Sanity check with plink2 to see if file is intact and generate some summary stats. Results should be the same as log file generated from converting to binary file:

plink2 --noweb --bfile P140343-Results_FinalReport


#########################


#########################
# Processing for sub-group and other analysis:
Rscript add_Tx_subgroups_alternate_phenotype_BEST-D.R
# This adds the columns: placebo_v_Tx	placebo_v_4000	placebo_v_2000	IU4000_v_2000
# so that further comparisons can be made (during association analysis for example).

#########################


#########################
# Feb 08 2016
# I received addtional variables from Jon. File '' and description '' saved in:
# bestd_antonio.txt in backups folder 

#This joins with existing phenotype file and processes season variable:
Rscript add_new_variables_alternate_phenotype_BEST-D.R 


#########################


#########################
# Next steps:
# Run marker QC and individuals QC.

#########################
